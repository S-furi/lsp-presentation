<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Homes on Language Server Protocol Presentation</title><link>https://s-furi.github.io/lsp-presentation/home/</link><description>Recent content in Homes on Language Server Protocol Presentation</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://s-furi.github.io/lsp-presentation/home/index.xml" rel="self" type="application/rss+xml"/><item><title>Language Server Protocol - Presentation</title><link>https://s-furi.github.io/lsp-presentation/home/sec-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://s-furi.github.io/lsp-presentation/home/sec-1/</guid><description>&lt;h2 id="why-do-we-need-lsp">Why do we need LSP?&lt;/h2>
&lt;ul>
&lt;li>Code editor should provide language support&lt;/li>
&lt;li>Standard approach: a new implementation for each language and editor&lt;/li>
&lt;li>Better approach: language server communicating with editor using standarized protocol&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="img/idea.png" alt="How it works">&lt;/p>



&lt;aside class="notes">
* IDE or simpler editor.
* autocompletion, goto definition, or documentation on hover
* server can be reused
&lt;/aside>
&lt;hr>
&lt;h2 id="what-is-lsp">What is LSP?&lt;/h2>
&lt;ul>
&lt;li>Protocol used between editors and servers that provide language support&lt;/li>
&lt;li>JSON-RPC-based&lt;/li>
&lt;li>Originally developed for Microsoft Visual Studio Code, now open standard&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">Content-Length:&lt;/span> &lt;span style="color:#a40000">...\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">\r\n&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#204a87;font-weight:bold">&amp;#34;jsonrpc&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2.0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#204a87;font-weight:bold">&amp;#34;id&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#204a87;font-weight:bold">&amp;#34;method&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;textDocument/completion&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#204a87;font-weight:bold">&amp;#34;params&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#a40000">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>


&lt;aside class="notes">
* Code completion, syntax highlighting, marking of warnings and errors, and help with refactoring
* RPC (Remote Procedure Call) is a protocol that allows a program to execute a procedure or function on a remote computer or server as if it were a local call, simplifying distributed application development by abstracting away the complexities of network communication.
&lt;/aside>
&lt;hr>


&lt;section data-shortcode-section>
&lt;h2 id="key-concepts-of-lsp">Key concepts of LSP&lt;/h2>
&lt;hr>
&lt;h3 id="overview">Overview&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Client&lt;/strong>: editor&lt;/li>
&lt;li>&lt;strong>Server&lt;/strong>: language server&lt;/li>
&lt;li>Exchange through stdio or socket&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="img/messages.png" alt="Exchange of messages">&lt;/p></description></item><item><title>Language Server Protocol - Presentation</title><link>https://s-furi.github.io/lsp-presentation/home/sec-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://s-furi.github.io/lsp-presentation/home/sec-2/</guid><description>&lt;h2 id="a-simple-kotlin-example">A Simple Kotlin Example&lt;/h2></description></item></channel></rss>